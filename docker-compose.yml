version: "3.9"

services:

  userservice:
    container_name: userservice
    # hostname: ${SERVER_HOST}
    build:
      dockerfile: ./app.Dockerfile
      context: .
    environment:
      - SERVER_HOST=${SERVER_HOST}
      - SERVER_PORT=${SERVER_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
      - USERADD_TOPIC=${USERADD_TOPIC}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - ${SERVER_PORT}:8080
    networks:
      - usernet

  redis:
    container_name: redis-db
    # hostname: ${REDIS_HOST}
    image: redis:7.0-alpine3.15
    command: "--requirepass ${REDIS_PASSWORD}"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      timeout: 10s
      interval: 10s
      retries: 10
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - usernet

  postgres:
    container_name: users-db
    # hostname: ${POSTGRES_HOST}
    image: postgres:14.2-alpine
    restart: on-failure
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - users-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      timeout: 10s
      interval: 10s
      retries: 10
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - usernet
      
  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./${MIGRATION_DIR}:/migrations
    command: ["-path", "/migrations", "-database",
    'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable',
    "up"]
    networks:
      - usernet
     
  zookeeper:
    image: zookeeper
    container_name: zookeeper
    # hostname: ${ZOOKEEPER_HOST}
    restart: on-failure
    ports:
      - ${ZOOKEEPER_PORT1}:2181
      - ${ZOOKEEPER_PORT2}:2182
    networks:
      - usernet
    
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    # hostname: ${KAFKA_HOST}
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_HOST}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT1}
      KAFKA_CREATE_TOPICS: useraddtopic:1:1
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT1}"]
      timeout: 10s
      interval: 5s
      retries: 10
    ports:
      - ${KAFKA_PORT}:9092
    networks:
      - usernet
  
  clickhouse-01:
    image: yandex/clickhouse-server
    container_name: clickhouse-01
    # hostname: ${CLICKHOUSE_HOST}
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
    volumes:
      - ./clickhouse/config/init.sh:/docker-entrypoint-initdb.d/init.sh
      - clickhouse-01:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
      - ${CLICKHOUSE_PORT1}:9000
      - ${CLICKHOUSE_PORT2}:8123
    networks:
      - usernet
   
volumes:
  users-db:
  clickhouse-01:
        
networks:
  usernet:
